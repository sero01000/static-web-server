name: Rust builds by Cross_v3

on:
  release:
    types: [created]

env:
  CRATE_NAME: runiq_ahash
  GITHUB_TOKEN: ${{ github.token }}
  RUST_BACKTRACE: 1


jobs:
  test:
    permissions: write-all
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          # Platforms that don't work:
          #
          # - sparc64-unknown-linux-gnu - cannot compile openssl-sys
          # - x86_64-unknown-illumos - weird error compiling openssl - "bin/sh: 1: granlib: not found"
          # TEST:

          - os_name: Linux-x86_64-musl
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-x86_64-unknown-linux-musl.tar.gz
          
          - os_name: Linux-x86_64-gnu
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-x86_64-unknown-linux-gnu.tar.gz

          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-aarch64-unknown-linux-gnu.tar.gz
            
          - os_name: Linux-arm-musleabi
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-arm-unknown-linux-musleabi.tar.gz
          
          - os_name: Linux-arm-gnueabihf
            os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-arm-unknown-linux-gnueabihf.tar.gz

          - os_name: Linux-armv7-musleabi
            os: ubuntu-20.04
            target: armv7-unknown-linux-musleabi
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-armv7-unknown-linux-musleabi.tar.gz
            
# Error: failed to run custom build command for `ring v0.16.20`
# OPENSSL_STATIC_ASSERT
#           - os_name: Linux-i686-musl
#             os: ubuntu-20.04
#             target: i686-unknown-linux-musl
#             bin: ${{ github.event.repository.name }}
#             name: ${{ github.event.repository.name }}-Linux-i686-musl.tar.gz
#             skip_tests: true

# ring not supported risc-v
#           - os_name: Linux-riscv64
#             os: ubuntu-20.04
#             target: riscv64gc-unknown-linux-gnu
#             bin: ${{ github.event.repository.name }}
#             name: ${{ github.event.repository.name }}-Linux-riscv64gc-gnu.tar.gz

          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-x86_64-unknown-freebsd.tar.gz
            skip_tests: true

          - os_name: NetBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-netbsd
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-x86_64-unknown-netbsd.tar.gz
            skip_tests: true
 
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: ${{ github.event.repository.name }}.exe
            name: ${{ github.event.repository.name }}-x86_64-pc-windows-msvc.zip

# Error: failed to run custom build command for `ring v0.16.20`
#           - os_name: Windows-aarch64
#             os: windows-latest
#             target: aarch64-pc-windows-msvc
#             bin: ${{ github.event.repository.name }}.exe
#             name: ${{ github.event.repository.name }}-aarch64-pc-windows-msvc.zip
#             skip_tests: true
            
          - os_name: Windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: ${{ github.event.repository.name }}.exe
            name: ${{ github.event.repository.name }}-i686-pc-windows-msvc.zip
            skip_tests: true
          
          - os_name: macOS-x86_64
            os: macos-12
            target: x86_64-apple-darwin
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-x86_64-apple-darwin.tar.gz
            
          - os_name: macOS-aarch64
            os: macos-12
            target: aarch64-apple-darwin
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-aarch64-apple-darwin.tar.gz
            skip_tests: true
            
          - os_name: IOS-aarch64
            os: macos-12
            target: aarch64-apple-ios
            bin: ${{ github.event.repository.name }}
            name: ${{ github.event.repository.name }}-aarch64-apple-ios.tar.gz
            skip_tests: true

# Error
# note: /android-ndk/bin/../lib/gcc/aarch64-linux-android/4.9.x/../../../../aarch64-linux-android/bin/ld: cannot find -lunwind
#           - os_name: aarch64-linux-android
#             os: ubuntu-22.04
#             target: aarch64-linux-android
#             bin: ${{ github.event.repository.name }}
#             name: ${{ github.event.repository.name }}-aarch64-linux-android.tar.gz

# Error: mismatched types
# Compiling listenfd v1.0.1
#           - os_name: Android-armv7
#             os: ubuntu-22.04
#             target: armv7-linux-androideabi
#             bin: ${{ github.event.repository.name }}
#             name: ${{ github.event.repository.name }}-armv7-linux-androideabi.tar.gz
            
        toolchain:
          - stable

    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2

      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.name, 'musl')
      
      - name: Install libunwind8-dev for Android
        run: sudo apt-get update --yes && sudo apt-get install --yes android-libunwind-dev
        if: contains(matrix.platform.name, 'aarch64-linux-android')

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--release"
          strip: true

      - name: Package as archive
        shell: bash
        run: |
          echo running archive
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ github.event.repository.name }}.exe
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ github.event.repository.name }}
          fi
          cd -
        if: |
          matrix.toolchain == 'stable' &&
          ( startsWith( github.ref, 'refs/tags/v' ) ||
            github.ref == 'refs/tags/test-release' )

      - name: Publish release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.platform.os_name }}
          path: "${{ github.event.repository.name }}-*"
        if: matrix.toolchain == 'stable'

      - name: Generate SHA-256
        run: shasum -a 256 ${{ matrix.platform.name }}
        if: |
          matrix.toolchain == 'stable' &&
            ( startsWith( github.ref, 'refs/tags/v' ) ||
            github.ref == 'refs/tags/test-release' )

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "${{ github.event.repository.name }}-*"
          body_path: Changes.md
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
